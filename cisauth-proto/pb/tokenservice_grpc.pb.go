// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/python/pyproto/tokenservice.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenServiceClient is the client API for TokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenServiceClient interface {
	AcceptLogin(ctx context.Context, in *AcceptLoginRequest, opts ...grpc.CallOption) (*AcceptLoginResponse, error)
	AcceptConsent(ctx context.Context, in *AcceptConsentRequest, opts ...grpc.CallOption) (*AcceptConsentResponse, error)
	ExchangeToken(ctx context.Context, in *TokenExchangeRequest, opts ...grpc.CallOption) (*TokenExchangeResponse, error)
	Introspect(ctx context.Context, in *IntrospectRequest, opts ...grpc.CallOption) (*IntrospectResponse, error)
	GenerateVerificationToken(ctx context.Context, in *GenerateVerificationTokenRequest, opts ...grpc.CallOption) (*ClientTokenResponse, error)
	IntrospectVerificationToken(ctx context.Context, in *IntrospectVerificationRequest, opts ...grpc.CallOption) (*IntrospectVerificationResponse, error)
	GenerateRefreshToken(ctx context.Context, in *GenerateRefreshTokenRequest, opts ...grpc.CallOption) (*TokenExchangeResponse, error)
	RevokeAccessToken(ctx context.Context, in *RevokeAccessTokenRequest, opts ...grpc.CallOption) (*EmptyGrpcMessage, error)
}

type tokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenServiceClient(cc grpc.ClientConnInterface) TokenServiceClient {
	return &tokenServiceClient{cc}
}

func (c *tokenServiceClient) AcceptLogin(ctx context.Context, in *AcceptLoginRequest, opts ...grpc.CallOption) (*AcceptLoginResponse, error) {
	out := new(AcceptLoginResponse)
	err := c.cc.Invoke(ctx, "/TokenService/AcceptLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) AcceptConsent(ctx context.Context, in *AcceptConsentRequest, opts ...grpc.CallOption) (*AcceptConsentResponse, error) {
	out := new(AcceptConsentResponse)
	err := c.cc.Invoke(ctx, "/TokenService/AcceptConsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) ExchangeToken(ctx context.Context, in *TokenExchangeRequest, opts ...grpc.CallOption) (*TokenExchangeResponse, error) {
	out := new(TokenExchangeResponse)
	err := c.cc.Invoke(ctx, "/TokenService/ExchangeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) Introspect(ctx context.Context, in *IntrospectRequest, opts ...grpc.CallOption) (*IntrospectResponse, error) {
	out := new(IntrospectResponse)
	err := c.cc.Invoke(ctx, "/TokenService/Introspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) GenerateVerificationToken(ctx context.Context, in *GenerateVerificationTokenRequest, opts ...grpc.CallOption) (*ClientTokenResponse, error) {
	out := new(ClientTokenResponse)
	err := c.cc.Invoke(ctx, "/TokenService/GenerateVerificationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) IntrospectVerificationToken(ctx context.Context, in *IntrospectVerificationRequest, opts ...grpc.CallOption) (*IntrospectVerificationResponse, error) {
	out := new(IntrospectVerificationResponse)
	err := c.cc.Invoke(ctx, "/TokenService/IntrospectVerificationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) GenerateRefreshToken(ctx context.Context, in *GenerateRefreshTokenRequest, opts ...grpc.CallOption) (*TokenExchangeResponse, error) {
	out := new(TokenExchangeResponse)
	err := c.cc.Invoke(ctx, "/TokenService/GenerateRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) RevokeAccessToken(ctx context.Context, in *RevokeAccessTokenRequest, opts ...grpc.CallOption) (*EmptyGrpcMessage, error) {
	out := new(EmptyGrpcMessage)
	err := c.cc.Invoke(ctx, "/TokenService/RevokeAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServiceServer is the server API for TokenService service.
// All implementations should embed UnimplementedTokenServiceServer
// for forward compatibility
type TokenServiceServer interface {
	AcceptLogin(context.Context, *AcceptLoginRequest) (*AcceptLoginResponse, error)
	AcceptConsent(context.Context, *AcceptConsentRequest) (*AcceptConsentResponse, error)
	ExchangeToken(context.Context, *TokenExchangeRequest) (*TokenExchangeResponse, error)
	Introspect(context.Context, *IntrospectRequest) (*IntrospectResponse, error)
	GenerateVerificationToken(context.Context, *GenerateVerificationTokenRequest) (*ClientTokenResponse, error)
	IntrospectVerificationToken(context.Context, *IntrospectVerificationRequest) (*IntrospectVerificationResponse, error)
	GenerateRefreshToken(context.Context, *GenerateRefreshTokenRequest) (*TokenExchangeResponse, error)
	RevokeAccessToken(context.Context, *RevokeAccessTokenRequest) (*EmptyGrpcMessage, error)
}

// UnimplementedTokenServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTokenServiceServer struct {
}

func (UnimplementedTokenServiceServer) AcceptLogin(context.Context, *AcceptLoginRequest) (*AcceptLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptLogin not implemented")
}
func (UnimplementedTokenServiceServer) AcceptConsent(context.Context, *AcceptConsentRequest) (*AcceptConsentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptConsent not implemented")
}
func (UnimplementedTokenServiceServer) ExchangeToken(context.Context, *TokenExchangeRequest) (*TokenExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeToken not implemented")
}
func (UnimplementedTokenServiceServer) Introspect(context.Context, *IntrospectRequest) (*IntrospectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Introspect not implemented")
}
func (UnimplementedTokenServiceServer) GenerateVerificationToken(context.Context, *GenerateVerificationTokenRequest) (*ClientTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateVerificationToken not implemented")
}
func (UnimplementedTokenServiceServer) IntrospectVerificationToken(context.Context, *IntrospectVerificationRequest) (*IntrospectVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectVerificationToken not implemented")
}
func (UnimplementedTokenServiceServer) GenerateRefreshToken(context.Context, *GenerateRefreshTokenRequest) (*TokenExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRefreshToken not implemented")
}
func (UnimplementedTokenServiceServer) RevokeAccessToken(context.Context, *RevokeAccessTokenRequest) (*EmptyGrpcMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAccessToken not implemented")
}

// UnsafeTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenServiceServer will
// result in compilation errors.
type UnsafeTokenServiceServer interface {
	mustEmbedUnimplementedTokenServiceServer()
}

func RegisterTokenServiceServer(s grpc.ServiceRegistrar, srv TokenServiceServer) {
	s.RegisterService(&TokenService_ServiceDesc, srv)
}

func _TokenService_AcceptLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).AcceptLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenService/AcceptLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).AcceptLogin(ctx, req.(*AcceptLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_AcceptConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptConsentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).AcceptConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenService/AcceptConsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).AcceptConsent(ctx, req.(*AcceptConsentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_ExchangeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).ExchangeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenService/ExchangeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).ExchangeToken(ctx, req.(*TokenExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_Introspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrospectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).Introspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenService/Introspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).Introspect(ctx, req.(*IntrospectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_GenerateVerificationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateVerificationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).GenerateVerificationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenService/GenerateVerificationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).GenerateVerificationToken(ctx, req.(*GenerateVerificationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_IntrospectVerificationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrospectVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).IntrospectVerificationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenService/IntrospectVerificationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).IntrospectVerificationToken(ctx, req.(*IntrospectVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_GenerateRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).GenerateRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenService/GenerateRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).GenerateRefreshToken(ctx, req.(*GenerateRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_RevokeAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).RevokeAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenService/RevokeAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).RevokeAccessToken(ctx, req.(*RevokeAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenService_ServiceDesc is the grpc.ServiceDesc for TokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TokenService",
	HandlerType: (*TokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptLogin",
			Handler:    _TokenService_AcceptLogin_Handler,
		},
		{
			MethodName: "AcceptConsent",
			Handler:    _TokenService_AcceptConsent_Handler,
		},
		{
			MethodName: "ExchangeToken",
			Handler:    _TokenService_ExchangeToken_Handler,
		},
		{
			MethodName: "Introspect",
			Handler:    _TokenService_Introspect_Handler,
		},
		{
			MethodName: "GenerateVerificationToken",
			Handler:    _TokenService_GenerateVerificationToken_Handler,
		},
		{
			MethodName: "IntrospectVerificationToken",
			Handler:    _TokenService_IntrospectVerificationToken_Handler,
		},
		{
			MethodName: "GenerateRefreshToken",
			Handler:    _TokenService_GenerateRefreshToken_Handler,
		},
		{
			MethodName: "RevokeAccessToken",
			Handler:    _TokenService_RevokeAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/python/pyproto/tokenservice.proto",
}
